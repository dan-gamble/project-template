@import 'functions';

/*
|--------------------------------------------------------------------------
| Defaults
|--------------------------------------------------------------------------
|
*/
$Media_Ranges: (
  xs: (0, 480px),
  sm: (481px, 768px),
  md: (769px, 1024px),
  lg: (1025px, 1440px),
  xlg: (1441px, 1920px),
  xxlg: (1921px, 999999px)
) !default;

// The sizes the media queries mixin can accept
$SIZES: ('xs', 'sm', 'md', 'lg', 'xlg', 'xxlg', 'xs-only', 'sm-only', 'md-only', 'lg-only', 'xlg-only', 'xxlg-only') !default;

/*
|--------------------------------------------------------------------------
| MQ
|--------------------------------------------------------------------------
| The mixin used for all of our responsive changes. By default it will take
| the breakpoint supplied and apply the changes to that breakpoint and all the
| sizes above it.
|
| If you require styles to be applied to just a certain breakpoint you can use
| '{$size}-only' which will apply styles to just that size and not to sizes
| above it.
|
| Do not under ANY circumstances add a set of arguments that only apply a
| max-width so it applies to the size set and all sizes below. This is very
| bad practice.
|
| @size: Size that the styles will apply to and above
*/
@mixin MQ($size) {
  @if contains($SIZES, $size) {
    // Equal to and greater than
    @if $size == 'xs' {
      @media only screen and (min-width: #{lower-bound(map-get($Media_Ranges, xs))}) {
        @content;
      }
    } @else if $size == 'sm' {
      @media only screen and (min-width: #{lower-bound(map-get($Media_Ranges, sm))}) {
        @content;
      }
    } @else if $size == 'md' {
      @media only screen and (min-width: #{lower-bound(map-get($Media_Ranges, md))}) {
        @content;
      }
    } @else if $size == 'lg' {
      @media only screen and (min-width: #{lower-bound(map-get($Media_Ranges, lg))}) {
        @content;
      }
    } @else if $size == 'xlg' {
      @media only screen and (min-width: #{lower-bound(map-get($Media_Ranges, xlg))}) {
        @content;
      }
    } @else if $size == 'xxlg' {
      @media only screen and (min-width: #{lower-bound(map-get($Media_Ranges, xxlg))}) {
        @content;
      }
    }

    // Apply to only this breakpoint
    @else if $size == 'xs-only' {
      @media only screen and (max-width: #{upper-bound(map-get($Media_Ranges, xs))}) {
        @content;
      }
    } @else if $size == 'sm-only' {
      @media only screen and (min-width: #{lower-bound(map-get($Media_Ranges, sm))}) and (max-width: #{upper-bound(map-get($Media_Ranges, sm))}) {
        @content;
      }
    } @else if $size == 'md-only' {
      @media only screen and (min-width: #{lower-bound(map-get($Media_Ranges, md))}) and (max-width: #{upper-bound(map-get($Media_Ranges, md))}) {
        @content;
      }
    } @else if $size == 'lg-only' {
      @media only screen and (min-width: #{lower-bound(map-get($Media_Ranges, lg))}) and (max-width: #{upper-bound(map-get($Media_Ranges, lg))}) {
        @content;
      }
    } @else if $size == 'xlg-only' {
      @media only screen and (min-width: #{lower-bound(map-get($Media_Ranges, xlg))}) and (max-width: #{upper-bound(map-get($Media_Ranges, xlg))}) {
        @content;
      }
    } @else if $size == 'xxlg-only' {
      @media only screen and (min-width: #{lower-bound(map-get($Media_Ranges, xxlg))}) and (max-width: #{upper-bound(map-get($Media_Ranges, xxlg))}) {
        @content;
      }
    }
  } @else {
    @error 'Argument must be any of: #{$SIZES}';
  }
}
